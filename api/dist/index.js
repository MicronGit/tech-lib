"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const db_1 = require("./db");
/**
 * GET /books - 図書一覧を取得するAPI
 * @returns 図書一覧データ
 */
const getBooks = async () => {
    return (0, db_1.query)(`
    SELECT 
      id, 
      title, 
      author, 
      publisher, 
      TO_CHAR(publication_date, 'YYYY-MM-DD') as publication_date,
      isbn, 
      genre, 
      page_count, 
      language, 
      owner,
      TO_CHAR(created_at, 'YYYY-MM-DD"T"HH24:MI:SS"Z"') as created_at,
      TO_CHAR(updated_at, 'YYYY-MM-DD"T"HH24:MI:SS"Z"') as updated_at
    FROM books
    ORDER BY id DESC
  `);
};
/**
 * 標準的なCORSヘッダーを設定
 */
const getCorsHeaders = () => ({
    'Access-Control-Allow-Origin': '*', // 本番ではオリジンを限定
    'Access-Control-Allow-Headers': 'Content-Type,Authorization',
    'Access-Control-Allow-Methods': 'OPTIONS,GET',
    'Content-Type': 'application/json'
});
/**
 * APIレスポンスを標準フォーマットで返す
 */
const formatResponse = (statusCode, data) => ({
    statusCode,
    headers: getCorsHeaders(),
    body: JSON.stringify(data)
});
/**
 * Lambdaハンドラー関数
 */
const handler = async (event) => {
    // PREFLIGHTリクエスト（OPTIONS）への対応
    if (event.httpMethod === 'OPTIONS') {
        return formatResponse(200, {});
    }
    try {
        // パスとHTTPメソッドに基づいて処理を分岐
        if (event.resource === '/books' && event.httpMethod === 'GET') {
            const books = await getBooks();
            return formatResponse(200, { books });
        }
        // 対応していないエンドポイントの場合
        return formatResponse(404, { message: 'Not Found' });
    }
    catch (error) {
        console.error('APIリクエストの処理中にエラーが発生しました', error);
        return formatResponse(500, {
            message: 'Internal Server Error',
            error: error instanceof Error ? error.message : String(error)
        });
    }
    finally {
        try {
            await (0, db_1.end)();
        }
        catch (error) {
            console.error('DB接続の終了に失敗しました', error);
        }
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw2QkFBa0M7QUFHbEM7OztHQUdHO0FBQ0gsTUFBTSxRQUFRLEdBQUcsS0FBSyxJQUFxQixFQUFFO0lBQzNDLE9BQU8sSUFBQSxVQUFLLEVBQU87Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQmxCLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxjQUFjLEdBQUcsR0FBMkIsRUFBRSxDQUFDLENBQUM7SUFDcEQsNkJBQTZCLEVBQUUsR0FBRyxFQUFFLGNBQWM7SUFDbEQsOEJBQThCLEVBQUUsNEJBQTRCO0lBQzVELDhCQUE4QixFQUFFLGFBQWE7SUFDN0MsY0FBYyxFQUFFLGtCQUFrQjtDQUNuQyxDQUFDLENBQUM7QUFFSDs7R0FFRztBQUNILE1BQU0sY0FBYyxHQUFHLENBQUMsVUFBa0IsRUFBRSxJQUFhLEVBQWUsRUFBRSxDQUFDLENBQUM7SUFDMUUsVUFBVTtJQUNWLE9BQU8sRUFBRSxjQUFjLEVBQUU7SUFDekIsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0NBQzNCLENBQUMsQ0FBQztBQUVIOztHQUVHO0FBQ0ksTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQTJCLEVBQWtDLEVBQUU7SUFDM0YsOEJBQThCO0lBQzlCLElBQUksS0FBSyxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUNuQyxPQUFPLGNBQWMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksQ0FBQztRQUNILHdCQUF3QjtRQUN4QixJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssS0FBSyxFQUFFLENBQUM7WUFDOUQsTUFBTSxLQUFLLEdBQUcsTUFBTSxRQUFRLEVBQUUsQ0FBQztZQUMvQixPQUFPLGNBQWMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLENBQUM7UUFFRCxvQkFBb0I7UUFDcEIsT0FBTyxjQUFjLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLHlCQUF5QixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hELE9BQU8sY0FBYyxDQUFDLEdBQUcsRUFBRTtZQUN6QixPQUFPLEVBQUUsdUJBQXVCO1lBQ2hDLEtBQUssRUFBRSxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQzlELENBQUMsQ0FBQztJQUNMLENBQUM7WUFBUyxDQUFDO1FBQ1QsSUFBSSxDQUFDO1lBQ0gsTUFBTSxJQUFBLFFBQUcsR0FBRSxDQUFDO1FBQ2QsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBNUJXLFFBQUEsT0FBTyxXQTRCbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCwgQVBJR2F0ZXdheVByb3h5UmVzdWx0IH0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQgeyBxdWVyeSwgZW5kIH0gZnJvbSAnLi9kYic7XG5pbXBvcnQgeyBCb29rLCBBcGlSZXNwb25zZSB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIEdFVCAvYm9va3MgLSDlm7Pmm7jkuIDopqfjgpLlj5blvpfjgZnjgotBUElcbiAqIEByZXR1cm5zIOWbs+abuOS4gOimp+ODh+ODvOOCv1xuICovXG5jb25zdCBnZXRCb29rcyA9IGFzeW5jICgpOiBQcm9taXNlPEJvb2tbXT4gPT4ge1xuICByZXR1cm4gcXVlcnk8Qm9vaz4oYFxuICAgIFNFTEVDVCBcbiAgICAgIGlkLCBcbiAgICAgIHRpdGxlLCBcbiAgICAgIGF1dGhvciwgXG4gICAgICBwdWJsaXNoZXIsIFxuICAgICAgVE9fQ0hBUihwdWJsaWNhdGlvbl9kYXRlLCAnWVlZWS1NTS1ERCcpIGFzIHB1YmxpY2F0aW9uX2RhdGUsXG4gICAgICBpc2JuLCBcbiAgICAgIGdlbnJlLCBcbiAgICAgIHBhZ2VfY291bnQsIFxuICAgICAgbGFuZ3VhZ2UsIFxuICAgICAgb3duZXIsXG4gICAgICBUT19DSEFSKGNyZWF0ZWRfYXQsICdZWVlZLU1NLUREXCJUXCJISDI0Ok1JOlNTXCJaXCInKSBhcyBjcmVhdGVkX2F0LFxuICAgICAgVE9fQ0hBUih1cGRhdGVkX2F0LCAnWVlZWS1NTS1ERFwiVFwiSEgyNDpNSTpTU1wiWlwiJykgYXMgdXBkYXRlZF9hdFxuICAgIEZST00gYm9va3NcbiAgICBPUkRFUiBCWSBpZCBERVNDXG4gIGApO1xufTtcblxuLyoqXG4gKiDmqJnmupbnmoTjgapDT1JT44OY44OD44OA44O844KS6Kit5a6aXG4gKi9cbmNvbnN0IGdldENvcnNIZWFkZXJzID0gKCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPT4gKHtcbiAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJywgLy8g5pys55Wq44Gn44Gv44Kq44Oq44K444Oz44KS6ZmQ5a6aXG4gICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJzogJ0NvbnRlbnQtVHlwZSxBdXRob3JpemF0aW9uJyxcbiAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMnOiAnT1BUSU9OUyxHRVQnLFxuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG59KTtcblxuLyoqXG4gKiBBUEnjg6zjgrnjg53jg7PjgrnjgpLmqJnmupbjg5Xjgqnjg7zjg57jg4Pjg4jjgafov5TjgZlcbiAqL1xuY29uc3QgZm9ybWF0UmVzcG9uc2UgPSAoc3RhdHVzQ29kZTogbnVtYmVyLCBkYXRhOiB1bmtub3duKTogQXBpUmVzcG9uc2UgPT4gKHtcbiAgc3RhdHVzQ29kZSxcbiAgaGVhZGVyczogZ2V0Q29yc0hlYWRlcnMoKSxcbiAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcbn0pO1xuXG4vKipcbiAqIExhbWJkYeODj+ODs+ODieODqeODvOmWouaVsFxuICovXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogQVBJR2F0ZXdheVByb3h5RXZlbnQpOiBQcm9taXNlPEFQSUdhdGV3YXlQcm94eVJlc3VsdD4gPT4ge1xuICAvLyBQUkVGTElHSFTjg6rjgq/jgqjjgrnjg4jvvIhPUFRJT05T77yJ44G444Gu5a++5b+cXG4gIGlmIChldmVudC5odHRwTWV0aG9kID09PSAnT1BUSU9OUycpIHtcbiAgICByZXR1cm4gZm9ybWF0UmVzcG9uc2UoMjAwLCB7fSk7XG4gIH1cblxuICB0cnkge1xuICAgIC8vIOODkeOCueOBqEhUVFDjg6Hjgr3jg4Pjg4njgavln7rjgaXjgYTjgablh6bnkIbjgpLliIblspBcbiAgICBpZiAoZXZlbnQucmVzb3VyY2UgPT09ICcvYm9va3MnICYmIGV2ZW50Lmh0dHBNZXRob2QgPT09ICdHRVQnKSB7XG4gICAgICBjb25zdCBib29rcyA9IGF3YWl0IGdldEJvb2tzKCk7XG4gICAgICByZXR1cm4gZm9ybWF0UmVzcG9uc2UoMjAwLCB7IGJvb2tzIH0pO1xuICAgIH1cblxuICAgIC8vIOWvvuW/nOOBl+OBpuOBhOOBquOBhOOCqOODs+ODieODneOCpOODs+ODiOOBruWgtOWQiFxuICAgIHJldHVybiBmb3JtYXRSZXNwb25zZSg0MDQsIHsgbWVzc2FnZTogJ05vdCBGb3VuZCcgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignQVBJ44Oq44Kv44Ko44K544OI44Gu5Yem55CG5Lit44Gr44Ko44Op44O844GM55m655Sf44GX44G+44GX44GfJywgZXJyb3IpO1xuICAgIHJldHVybiBmb3JtYXRSZXNwb25zZSg1MDAsIHsgXG4gICAgICBtZXNzYWdlOiAnSW50ZXJuYWwgU2VydmVyIEVycm9yJyxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcilcbiAgICB9KTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZW5kKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RC5o6l57aa44Gu57WC5LqG44Gr5aSx5pWX44GX44G+44GX44GfJywgZXJyb3IpO1xuICAgIH1cbiAgfVxufTsiXX0=